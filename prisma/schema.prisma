// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Section {
  id         Int           @id @default(autoincrement())
  month      DateTime
  title      String
  values     SectionItem[]
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  assetClass String        @default("ASSET")

  @@unique([title, month])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Section   Section[]
  TableData TableData[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SectionItem {
  id        Int     @id @default(autoincrement())
  label     String
  value     Int
  Section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int
}

model TableData {
  id           Int      @id @default(autoincrement())
  date         DateTime
  sectionValue Int
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, date]) // Compound unique constraint
}
